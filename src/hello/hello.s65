.include "nes_common.inc"
.include "ppu.inc"
.include "macros.inc"

.segment "CODE"

.proc irq_handler
  rti
.endproc

.proc nmi_handler
  rti
.endproc

.proc reset_handler
  sei          ;; disable interrupts
  cld          ;; no bcd mode
  ldx #$FF
  txs          ;; set sp to $01FF
  inx          ;; x is zero now
  stx PPU_CTRL ;; disable nmi 
  stx PPU_MASK ;; disable rendering
  stx PPU_SCROLL
  stx PPU_SCROLL
  stx DMC_IRQ_ENABLE
  bit PPU_STATUS  ;; ack stray vblank
  bit APU_STATUS_IRQ ;; ack dmc irq
  lda #$0F
  sta APU_CTRL ;; disable dmc playback but enable other channels
  lda #$40
  sta APU_FRAME_CNT_IRQ_BLOCK ;; disable APU FRAME IRQ

;; first vblank wait to stabilize PPU
  vblank_wait_loop

;; Do stuff like init oam, prg, chr, etc

;; second vblank wait
  vblank_wait_loop

;; lets do bg stuff
;; palettes
  lda PPU_STATUS
  lda #$3F
  sta PPU_ADDR
  lda #$00
  sta PPU_ADDR
  ldx #$00
load_palettes:
  lda palettes, x
  sta PPU_DATA
  inx
  cpx #$20
  bne load_palettes


  jmp main
.endproc


.proc main
  store_double $3F00, PPU_ADDR
  lda #$11
  sta PPU_DATA
  lda #$1E
  sta PPU_MASK
  self_jump
.endproc

.segment "RODATA"
palettes:
  .byte $0F, $11, $21, $18 ;; bg palette
  .byte $0F, $00, $00, $00
  .byte $0F, $00, $00, $00
  .byte $0F, $00, $00, $00
  .byte $0F, $20, $21, $15 ;; sprite palette
  .byte $0F, $00, $00, $00
  .byte $0F, $00, $00, $00
  .byte $0F, $00, $00, $00

